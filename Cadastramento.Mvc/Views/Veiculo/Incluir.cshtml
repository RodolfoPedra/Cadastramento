@model Cadastramento.ModelData.Logic.Cadastramento.veiculo
@{
    ViewBag.Title = "..:: Cadastramento | Veículo ::..";
    Layout = "~/Views/Shared/_LayoutExterno.cshtml";
}

<h4><b>Veículo</b></h4>
<section class="container-cadastro">
    <ul class="js-tab lista">
        <li class="item-lista il-selected">
            Identificação
            <div class="box-wizard bw-selected"></div>
        </li>
        <li class="item-lista">
            Dados do Veículo
            <div class="box-wizard"></div>
        </li>
        <li class="item-lista">
            Endereço
            <div class="box-wizard"></div>
        </li>
        <li class="item-lista">
            Monitoramento
            <div class="box-wizard"></div>
        </li>
        @*<li class="item-lista">
                Importar Documento
                <div class="box-wizard"></div>
            </li>*@
    </ul>

    @using (Html.BeginForm("Incluir", "Veiculo", FormMethod.Post, new { @class = "kt-form", @id = "form", @enctype = "multipart/form-data" }))
    {
        @Html.HiddenFor(model => model.situacaocadastroid)
        <div class="section-form">
            <section data-anime="sectionDatas">
                <div class="form-row">
                    <div class="form-group col-md-3">
                        @Html.Label("placa", "Placa")
                        @Html.TextBoxFor(model => model.placa, new { @class = "form-control"})
                    </div>
                    <div class="form-group col-md-3">
                        @Html.Label("renavan", "Renavam")
                        @Html.TextBoxFor(model => model.renavam, new { @class = "form-control"})
                    </div>                  
                </div>
                <hr />
                <div class="col-md-12 section-buttons">
                    <button type="button" class="btn btn-success" data-next="btnNext" onclick="Obter_Dados_Click();">
                        Proximo <span class="glyphicon glyphicon-arrow-right"></span>
                    </button>
                </div>
            </section>

            <section data-anime="sectionDatas">
                <div class="form-row">
                    <div class="form-group col-md-3">
                        @Html.Label("tipoveiculo", "Tipo de Veículo")
                        @Html.DropDownListFor(model => model.tipoveiculoid, ViewBag.ListaTipoVeiculo as SelectList, new { @class = "form-control"})
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-3">
                        @Html.Label("chassi", "Chassi")
                        @Html.TextBoxFor(model => model.chassi, new { @class = "form-control"})
                    </div>
                    <div class="form-group col-md-3">
                        @Html.Label("cidadelicenciamento", "Cidade Licenciamento")
                        @Html.TextBoxFor(model => model.cidadelicenciamento, new { @class = "form-control"})
                    </div>
                    <div class="form-group col-md-3">
                        @Html.Label("categoriaantt", "Categoria ANTT")
                        @Html.TextBoxFor(model => model.categoriaantt, new { @class = "form-control"})
                    </div>
                    <div class="form-group col-md-3">
                        @Html.Label("corpredominante", "Cor")
                        @Html.TextBoxFor(model => model.corpredominante, new { @class = "form-control"})
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-3">
                        @Html.Label("marca", "Marca")
                        @Html.TextBoxFor(model => model.marca, new { @class = "form-control"})
                    </div>
                    <div class="form-group col-md-3">
                        @Html.Label("anofabricacao", "Ano Fabricação")
                        @Html.TextBoxFor(model => model.anofabricacao, new { @class = "form-control"})
                    </div>
                    <div class="form-group col-md-3">
                        @Html.Label("anomodelo", "Ano Modelo")
                        @Html.TextBoxFor(model => model.anomodelo, new { @class = "form-control"})
                    </div>
                    <div class="form-group col-md-3">
                        @Html.Label("combustivel", "Combustível")
                        @Html.TextBoxFor(model => model.combustivel, new { @class = "form-control"})
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-3">
                        @Html.Label("tipo", "Tipo")
                        @Html.TextBoxFor(model => model.tipo, new { @class = "form-control"})
                    </div>
                    <div class="form-group col-md-3">
                        @Html.Label("especie", "Espécie")
                        @Html.TextBoxFor(model => model.especie, new { @class = "form-control"})
                    </div>
                    <div class="form-group col-md-3">
                        @Html.Label("categoria", "Categoria")
                        @Html.TextBoxFor(model => model.categoria, new { @class = "form-control"})
                    </div>
                    <div class="form-group col-md-3">
                        @Html.Label("capacidadepassageiro", "Capacidade Passageiros")
                        @Html.TextBoxFor(model => model.capacidadepassageiro, new { @class = "form-control"})
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-3">
                        @Html.Label("tipocarga", "Tipo de Carga")
                        @Html.DropDownListFor(model => model.tipocarga, ViewBag.ListaTipoCarga as SelectList, new { @class = "form-control"})
                    </div>
                    <div class="form-group col-md-2">
                        @Html.Label("lotacaomaxima", "Lotação Máxima")
                        @Html.TextBoxFor(model => model.lotacaomaxima, new { @class = "form-control"})
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-4">
                        @Html.Label("nomeproprietariotransportadora", "Proprietário")
                        @Html.TextBoxFor(model => model.nomeproprietariotransportadora, new { @class = "form-control"})
                    </div>
                    <div class="form-group col-md-4">
                        @Html.Label("cpfcnpj", "CPF/CNPJ")
                        @Html.TextBoxFor(model => model.cpfcnpj, new { @class = "form-control"})
                    </div>
                </div>
                <hr />
                <div class="col-md-12 section-buttons">
                    <button type="button" class="btn btn-danger" data-back="btnBack">Voltar</button>
                    <button type="button" class="btn btn-success" data-next="btnNext">Proximo <span class="glyphicon glyphicon-arrow-right"></span></button>
                </div>
            </section>

            <section data-anime="sectionDatas">

                <div class="form-row">
                    <div class="form-group col-md-8">
                        @Html.Label("cep", "Cep")
                        @Html.TextBoxFor(model => model.cep, new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6">
                        @Html.Label("logradouro", "Logradouro")
                        @Html.TextBoxFor(model => model.logradouro, new { @class = "form-control"})
                    </div>
                    <div class="form-group col-md-2">
                        @Html.Label("numero", "Nº")
                        @Html.TextBoxFor(model => model.numero, new { @class = "form-control"})
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6">
                        @Html.Label("complemento", "Complemento")
                        @Html.TextBoxFor(model => model.complemento, new { @class = "form-control"})
                    </div>
                    <div class="form-group col-md-4">
                        @Html.Label("bairro", "Bairro")
                        @Html.TextBoxFor(model => model.bairro, new { @class = "form-control"})
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-6">
                        @Html.Label("cidade", "Cidade")
                        @Html.TextBoxFor(model => model.cidade, new { @class = "form-control"})
                    </div>
                    <div class="form-group col-md-2">
                        @Html.Label("uf", "UF")
                        @Html.TextBoxFor(model => model.uf, new { @class = "form-control"})
                    </div>
                </div>
                <hr />
                <div class="form-row">
                    <div class="col-md-12 section-buttons">
                        <button type="button" class="btn btn-danger" data-back="btnBack">Voltar</button>
                        <button type="button" class="btn btn-success" data-next="btnNext">Proximo</button>
                    </div>
                </div>
            </section>

            <section data-anime="sectionDatas">
                <div class="form-row">
                    <div class="form-group col-md-5">
                        @Html.Label("monitorado", "Possui Monitoramento?")
                        @Html.DropDownListFor(model => model.monitorado, ViewBag.ListaMonitoramento as SelectList, new { @class = "form-control"})
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group col-md-5">
                        @Html.Label("tipomonitoramento", "Tipo Monitoramento")
                        @Html.TextBoxFor(model => model.tipomonitoramento, new { @class = "form-control"})
                    </div>
                    <div class="form-group col-md-5">
                        @Html.Label("empresamonitoramento", "Empresa Responsável Monitoramento")
                        @Html.TextBoxFor(model => model.empresamonitoramento, new { @class = "form-control"})
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="form-group">
                            <label>Documento do Veículo</label>
                            <div></div>
                            <div class="custom-file">
                                <input type="file" class="custom-file-input" id="file" name="file" data-max-size="15728640">
                                <label class="custom-file-label" for="file">Escolha um arquivo...</label>
                            </div>
                            @*<span style="color: red; font-size: 12px;">São aceitos somente arquivos no formato PDF ou Word e tamanho máximo de 15 MB</span>*@
                        </div>
                    </div>
                </div>

                <div class="form-row">
                    <div class="col-md-12 section-buttons">
                        <button type="button" class="btn btn-danger" data-back="btnBack"> Voltar</button>
                        <button type="button" class="btn btn-success" onclick="Salvar_Click();" style="margin-left: 5px;">Salvar</button>
                    </div>
                </div>
            </section>
        </div>
    }
</section>


@section Scripts{
    <script>
        function Salvar_Click() {     
            if (!verificaValor($("#placa").val())) {
                mensagemAviso("O campo Placa é obrigatório");
                return;
            }
            if (!verificaValor($("#renavam").val())) {
                mensagemAviso("O campo Renavam é obrigatório");
                return;
            }
            if (!verificaValor($("#chassi").val())) {
                mensagemAviso("O campo Chassi é obrigatório");
                return;
            }
            if (!verificaValor($("#cidadelicenciamento").val())) {
                mensagemAviso("O campo Cidade Licenciamento é obrigatório");
                return;
            }            
            if (!verificaValor($("#marca").val())) {
                mensagemAviso("O campo Marca é obrigatório");
                return;
            }
            if (!verificaValor($("#corpredominante").val())) {
                mensagemAviso("O campo Cor é obrigatório");
                return;
            }
            if (!verificaValor($("#combustivel").val())) {
                mensagemAviso("O campo Combustível é obrigatório");
                return;
            }
            if (!verificaValor($("#tipo").val())) {
                mensagemAviso("O campo Tipo é obrigatório");
                return;
            }
            if (!verificaValor($("#categoria").val())) {
                mensagemAviso("O campo Categoria é obrigatório");
                return;
            }
            if (!verificaValor($("#anofabricacao").val())) {
                mensagemAviso("O campo Ano Fabricação é obrigatório");
                return;
            }
            if (!verificaValor($("#anomodelo").val())) {
                mensagemAviso("O campo Ano Modelo é obrigatório");
                return;
            }
            if (!verificaValor($("#capacidadepassageiro").val())) {
                mensagemAviso("O campo Capacidade Passageiros é obrigatório");
                return;
            }
            if (!verificaValor($("#tipocarga").val())) {
                mensagemAviso("O campo Tipo Carga é obrigatório");
                return;
            }
            if (!verificaValor($("#lotacaomaxima").val())) {
                mensagemAviso("O campo Lotação Máxima é obrigatório");
                return;
            }
            if (!verificaValor($("#nomeproprietariotransportadora").val())) {
                mensagemAviso("O campo Proprietário é obrigatório");
                return;
            }
            if (!verificaValor($("#cpfcnpj").val())) {
                mensagemAviso("O campo CPF/CNPJ é obrigatório");
                return;
            }
            if (!verificaValor($("#cep").val())) {
                mensagemAviso("O campo CEP é obrigatório");
                return;
            }
            if (!verificaValor($("#logradouro").val())) {
                mensagemAviso("O campo Logradouro é obrigatório");
                return;
            }
            if (!verificaValor($("#numero").val())) {
                mensagemAviso("O campo Número é obrigatório");
                return;
            }
            if (!verificaValor($("#bairro").val())) {
                mensagemAviso("O campo Bairro é obrigatório");
                return;
            }
            if (!verificaValor($("#cidade").val())) {
                mensagemAviso("O campo Cidade é obrigatório");
                return;
            }
            if (!verificaValor($("#uf").val())) {
                mensagemAviso("O campo UF é obrigatório");
                return;
            }

            $("#form").submit();
        }

        function Obter_Dados_Click() {

            

            var placa = $("#placa").val();
            var renavam = $("#renavam").val();

            $.post('@Url.Action("ObterDetran", "Veiculo")', { "placa": placa, "renavam": renavam },
                function (data) {
                    if (data.Result == "OK" && data.Record.length != 0) {
                        $("#placa").val(data.Record.placa).attr('readonly', true);
                        $("#renavan").val(data.Record.renavam).attr('readonly', true);                       
                        $("#cidadelicenciamento").val(data.Record.cidadelicenciamento);
                        $("#chassi").val(data.Record.chassi).attr('readonly', true);
                        $("#marca").val(data.Record.marca).attr('readonly', true);
                        $("#corpredominante").val(data.Record.cor).attr('readonly', true);
                        $("#combustivel").val(data.Record.combustivel).attr('readonly', true);
                        $("#tipo").val(data.Record.tipo).attr('readonly', true);
                        $("#especie").val(data.Record.especie).attr('readonly', true);
                        $("#categoria").val(data.Record.categoria).attr('readonly', true);
                        $("#anofabricacao").val(data.Record.anofabricacao).attr('readonly', true);
                        $("#anomodelo").val(data.Record.anomodelo).attr('readonly', true);
                        $("#capacidadepassageiro").val(data.Record.capacidadepassageiro).attr('readonly', true);
                        $("#nomeproprietariotransportadora").val(data.Record.nomeproprietariotransportadora).attr('readonly', true);
                        $("#cep").val(data.Record.cep);
                        $("#logradouro").val(data.Record.logradouro);
                        $("#numero").val(data.Record.numero);
                        $("#complemento").val(data.Record.complemento);
                        $("#bairro").val(data.Record.bairro);
                        $("#cidade").val(data.Record.cidade);
                        $("#uf").val(data.Record.uf);
                        $("#situacaocadastroid").val(data.Record.situacaocadastroid);
                    }
                    else {

                        $("#placa").val(placa);
                        $("#renavam").val(renavam);
                        mensagemAviso("Cadastro não encontrado. Favor preencher todos dados manualmente.");                                               
                    }
                });
        }
    </script>
}